{"version":3,"file":"useCssVar.js","sourceRoot":"lib/","sources":["__builtins__/sfc-helper/useCssVar.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,eAAe,EACf,UAAU,IAAI,YAAY,GAC3B,MAAM,UAAU,CAAA;AACjB,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAA;AAEjD;;;GAGG;AACH,SAAS,oBAAoB,CAC3B,MAG2B;IAE3B,IAAI,CAAC,SAAS;QAAE,OAAM;IAEtB,IAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAA;IACrC,IAAI,CAAC,QAAQ,EAAE;QACb,IAAI,CACF,KAAK,EACL,iEAAiE,CAClE,CAAA;QACD,OAAM;KACP;IAED,eAAe,CAAC;QACd,IAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAA;QAC7B,wCAAwC;QACxC,IAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAY,CAAC,CAAA;QACpD,IAAI,EAAE,IAAI,EAAE,CAAC,QAAQ,KAAK,CAAC,EAAE;YAC3B,IAAM,KAAK,GAAI,EAAkB,CAAC,KAAK,CAAA;YACvC,KAAK,IAAM,GAAG,IAAI,IAAI,EAAE;gBACtB,KAAK,CAAC,WAAW,CAAC,YAAK,GAAG,CAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;aACzC;SACF;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,CAAC,IAAM,UAAU,GAAG,YAAY,IAAI,oBAAoB,CAAA","sourcesContent":["import {\n  getCurrentInstance,\n  watchPostEffect,\n  useCssVars as useCssVarsV3,\n} from 'vue-demi'\nimport { inBrowser, warn } from '../shared/utils'\n\n/**\n * Runtime helper for SFC's CSS variable injection feature.\n * @private\n */\nfunction useCssVarsCompatible(\n  getter: (\n    vm: Record<string, any>,\n    setupProxy: Record<string, any>\n  ) => Record<string, string>\n) {\n  if (!inBrowser) return\n\n  const instance = getCurrentInstance()\n  if (!instance) {\n    warn(\n      false,\n      `useCssVars is called without current active component instance.`\n    )\n    return\n  }\n\n  watchPostEffect(() => {\n    const el = instance.proxy.$el\n    // @ts-expect-error type does not export\n    const vars = getter(instance, instance._setupProxy!)\n    if (el && el.nodeType === 1) {\n      const style = (el as HTMLElement).style\n      for (const key in vars) {\n        style.setProperty(`--${key}`, vars[key])\n      }\n    }\n  })\n}\n\nexport const useCssVars = useCssVarsV3 || useCssVarsCompatible\n"]}